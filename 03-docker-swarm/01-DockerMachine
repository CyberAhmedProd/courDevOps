Introduction
------------

Docker Machine est un **outil de provisioning et de gestion des h√¥tes Docker** (h√¥tes virtuels ex√©cutant le moteur Docker). Vous pouvez utiliser Docker Machine pour cr√©er des h√¥tes Docker sur votre ordinateur personnel ou sur le datacenter de votre entreprise √† l'aide d'un logiciel de virtualisation tel que VirtualBox ou VMWare, vous pouvez aussi d√©ployer vos machines virtuelles chez des fournisseurs de cloud, tels que Azure, AWS, Google Compute Engine, etc ..

√Ä l'aide de la commande docker-machine, vous pouvez d√©marrer, inspecter, arr√™ter et red√©marrer un h√¥te g√©r√© ou mettre √† niveau le client et le moteur Docker et configurer un client Docker pour qu'il puisse communiquer avec votre h√¥te. En bref il **cr√©e automatiquement des h√¥tes Docker**, y **installe le moteur Docker**, puis **configure les clients docker**.

Installation de Docker Machine
------------------------------

Voici la **commande qui permet d'installer Docker Machine sous Linux**.

    base=https://github.com/docker/machine/releases/download/v0.16.0 &&
    curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
    sudo install /tmp/docker-machine /usr/local/bin/docker-machine

Pour pouvoir **activer l'auto-completion des commandes Docker Machine**, il suffit de cr√©er un script qu'on va nommer docker-machine-prompt.bash dans le dossier /etc/bash\_completion.d ou dans le dossier /usr/local/etc/bash\_completion.d et de coller dedans le contenu ci-dessous :

    sudo nano /etc/bash_completion.d/docker-machine-prompt.bash

    base=https://raw.githubusercontent.com/docker/machine/v0.16.0
    for i in docker-machine-prompt.bash docker-machine-wrapper.bash docker-machine.bash
    do
        sudo wget "$base/contrib/completion/bash/${i}" -P /etc/bash_completion.d
    done

Enfin, il faut lancer la commande source pour charger votre script d'auto-completion :

    source /etc/bash_completion.d/docker-machine-prompt.bash

Pour ceux qui ont install√© Docker sur une **machine Windows** pro avec HyperV d'activ√©, il n y'a pas besoin d'installation car Docker machine est install√© par d√©faut.

D√©couverte des drivers et des commandes Docker Machine
------------------------------------------------------

Docker machine utilise le concept des **drivers** (en fr : pilotes). Les drivers vous permettent depuis votre Docker machine. de cr√©er un ensemble complet de ressources sur vos machines virtuelles sur des services tiers tels qu'Azure, Amazon, VirtualBox, etc. Vous retrouverez la liste des diff√©rents drivers [ici](https://docs.docker.com/machine/drivers/).

Avant de vous d√©crire l'utilisation de certains drivers. Voici d'abord **la commande qui permet de cr√©er une machine virtuelle depuis votre Docker Machine** :

    docker-machine create --drive <DRIVER NAME> <MACHINE NAME>

La commande docker-machine create **t√©l√©charge une distribution Linux l√©g√®re nomm√©e [boot2docker](https://github.com/boot2docker/boot2docker)** venant avec le moteur Docker install√© et cr√©e et d√©marre la machine virtuelle. Les options de cette commande peuvent diff√©rer selon le type de driver que vous utilisez.

Nous allons voir ci-dessous comment cr√©er des h√¥tes Docker onpremise avec le driver virtualBox et hyperv mais aussi dans le Cloud avec le driver d'AWS (Amazon Web Service) nomm√© "amazonec2".

### D√©couverte du pilote VirtualBox et utilisation des commandes Docker Machine

Je suis actuellement sous Linux avec la distribution **Fedora 30**. Si vous √™tes sous une autre distribution alors la configuration risque d'√™tre un peu diff√©rente. Dans tous les cas, voici la **configuration requise pour le driver VirtualBox** :

*   Virtualbox √† partir de la version 5
*   Le module de noyau vboxdrv

Je vous fais confiance pour l'installation de VirtualBox, mais si jamais vous rencontrer des probl√®mes, alors n'h√©sitez pas √† m'en faire part dans l'espace commentaire, il est pr√©vu pour √ßa üòâ. En ce qui me concerne j'ai t√©l√©charg√© VirtualBox en version 6.0.10.

Pour **installer le module de noyau vboxdrv**, il faut au pr√©alable **installer le package kernel-devel**. Pour information le package kernel-devel t√©l√©charge les fichiers d'en-t√™tes du noyau Linux qui vont permettre aux d√©veloppeurs d'acc√©der aux diff√©rentes fonctionnalit√©s du noyau. De fa√ßon plus simple, il est n√©cessaire au d√©veloppement et √† la compilation de pilotes. Et c'est exactement ce qu'il nous faut !

    sudo dnf -y install kernel-devel

Attention

Pour ceux qui sont sous une autre distribution, veuillez chercher l'√©quivalent de ce package sur votre distribution.

Lancez ensuite la commande suivante pour **installer le module vboxdrv** :

    sudo /sbin/vboxconfig

R√©sultat :

    vboxdrv.sh: Stopping VirtualBox services.
    vboxdrv.sh: Starting VirtualBox services.
    vboxdrv.sh: Building VirtualBox kernel modules.g

Une fois les deux pr√©requis de configurations satisfaites, vous pouvez d√®s lors cr√©er votre h√¥te Docker en lan√ßant la commande create en utilisant le driver virtualbox avec les options par d√©faut :

    docker-machine create -d virtualbox --virtualbox-memory=4096 \
    --virtualbox-cpu-count=4 --virtualbox-disk-size=40960 \
    --virtualbox-no-vtx-check default

R√©sultat :

    Running pre-create checks...
    (vbox-test) Image cache directory does not exist, creating it at /home/hatim/.docker/machine/cache...
    (vbox-test) No default Boot2Docker ISO found locally, downloading the latest release...
    (vbox-test) Latest release for github.com/boot2docker/boot2docker is v18.09.7
    (vbox-test) Downloading /home/hatim/.docker/machine/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.09.7/boot2docker.iso...
    (vbox-test) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
    Creating machine...
    ...
    Checking connection to Docker...
    Docker is up and running!
    To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env vbox-test

Ensuite, **v√©rifiez la liste des machines Docker disponible** en ex√©cutant la commande suivante :

    docker-machine ls

R√©sultat :

    NAME        ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER     ERRORS
    vbox-test   -        virtualbox   Running   tcp://192.168.99.100:2376           v18.09.7

D'apr√®s le r√©sultat, notre h√¥te vbox-test est bien pr√©sent avec l'√©tat Running et poss√®de le moteur docker en version v18.09.7.

Si vous retournez √† la fin du r√©sultat de la commande docker-machine create, vous remarquerez le message suivant (traduit en fran√ßais) : "Pour voir comment connecter Docker √† cette machine, ex√©cutez: docker-machine env vbox-test". Cette manipulation, va nous permettre de **r√©cup√©rer les variables d'environnements de la nouvelle VM √† exporter**. Parfait, utilisons la alors :

    docker-machine env vbox-test

R√©sultat :

    export DOCKER_TLS_VERIFY="1"
    export DOCKER_HOST="tcp://192.168.99.100:2376"
    export DOCKER_CERT_PATH="/home/hatim/.docker/machine/machines/vbox-test"
    export DOCKER_MACHINE_NAME="vbox-test"
    # Run this command to configure your shell: 
    # eval $(docker-machine env vbox-test)

Le r√©sultat nous indique clairement que si on souhaite **utiliser le moteur Docker de la machine virtuelle sur notre shell courant** il faut alors utiliser la commande suivante :

    eval $(docker-machine env vbox-test)

En ex√©cutant cette commande sur votre shell courant, alors n'importe quelle commande Docker que vous ex√©cuterez, sera dor√©navant directement prise en compte par votre h√¥te Docker vboxt-test et non plus par votre h√¥te ma√Ætre.

Par ailleurs si vous souhaitez **v√©rifier sur quelle h√¥te Docker se lanceront vos prochaines commandes docker** alors soit vous v√©rifiez si une √©toile existe dans la colonne ACTIVE de la commande docker-machine ls. Soit plus simple encore, vous lancez la commande suivante :

    docker-machine active

R√©sultat :

    vbox-test

Le r√©sultat nous indique distinctement, que nos futurs commandes docker sur le shell courant s'ex√©cuteront directement sur la machine Docker vbox-test.

Afin de vous prouver que c'est effectivement le cas, je vais t√©l√©charger et ex√©cuter l'image [httpd](https://hub.docker.com/_/httpd) sur le shell courant :

    docker run -d -p 8000:80 --name vbox-test-httpd htppd

√Ä pr√©sent, ouvrez un nouveau terminal et v√©rifiez les conteneurs disponibles, vous verrez ainsi que vous ne retrouverez pas le conteneur vbox-test-httpd cr√©√© pr√©c√©demment :

    docker ps

R√©sultat :

    CONTAINER ID    IMAGE      COMMAND     CREATED     STATUS      PORTS       NAMES

Cependant si je retourne sur mon ancien shell avec la machine docker vbox-test activ√©e, dans ce cas j'obtiendrai bien un r√©sultat avec le conteneur vbox-test-httpd :

    docker ps

R√©sultat :

    CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES
    347723c8291f        httpd               "httpd-foreground"   3 minutes ago       Up 3 minutes        0.0.0.0:8000->80/tcp   vbox-test-httpd

Vous n'√™tes pas encore convaincu ? Alors **connectez vous carr√©ment √† la machine Docker** √† l'aide de la commande suivante :

    docker-machine ssh vbox-test

R√©sultat :

       ( '>')
      /) TC (\   Core is distributed with ABSOLUTELY NO WARRANTY.
     (/-_--_-\)           www.tinycorelinux.net
    
    docker@vbox-test:~$

Rev√©rifiez une nouvelle fois la liste de vos conteneurs et vous verrez que le conteneur vbox-test-httpd est bien dedans :

    docker ps

R√©sultat :

    CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES
    347723c8291f        httpd               "httpd-foreground"   3 minutes ago       Up 4 minutes        0.0.0.0:8000->80/tcp   vbox-test-httpd

Pour vous **assurer que le client Docker est automatiquement configur√© au d√©but de chaque session de shell**, vous pouvez alors int√©grer la commande eval $(docker-machine env vbox-test) votre fichier ~/.bash\_profile.

Si vous pensez avoir fini d'utiliser une machine Docker, vous pouvez l'**arr√™ter** avec la commande docker-machine stop et la **red√©marrer** plus tard avec la commande docker-machine start, example :

    docker stop vbox-test

    docker start vbox-test

Enfin, vous pouvez surcharger les ressources allou√©es automatiquement par d√©faut √† h√¥te Docker en utilisant les options venant avec le driver virtualbox. Dans cet exemple je vais cr√©er une machine Docker avec 30 Go d'espace disque (20 Go par d√©faut) et avec 2 Go de ram (1Go par d√©faut) et

    docker-machine create -d virtualbox \ 
    --virtualbox-disk-size "30000" \
    --virtualbox-memory "4000" \
    vbox-test-bigger

Vous retrouverez plus d'informations sur les options li√©es au driver virtualbox [ici](https://docs.docker.com/machine/drivers/virtualbox/).

### Le pilote HyperV

√Ä cet instant je suis pass√© sur ma machine Windows afin d'utiliser le pilote hyperv et par la suite cr√©er une machine docker bas√©e sur ce driver.

Si vous avez d√©j√† un switch r√©seau externe, ignorez cette configuration et allez voir directement la commande utilisant le driver hyperv. Mais si ce n'est pas le cas alors il faut en cr√©er un en suivant les instructions suivantes :

Ouvrez le gestionnaire Hyper-V et s√©lectionnez le "Gestionnaire de commutateur virtuel" dans le panneau d'actions de droite :

![selection du gestionnaire de switch virtuel hyper V](/images/articles/docker/docker-machine/hyperv/hyperv-selection-vswitch.jpg)

Ensuite, **configurez un nouveau switch r√©seau externe** √† utiliser √† la place du switch r√©seau DockerNAT :

![creation d'un nouveau switch externe HyperV partie 1](/images/articles/docker/docker-machine/hyperv/nouveau-switch-externe-hyperV.jpg)

Pour cet exemple, nous allons cr√©er un switch virtuel appel√© "Docker machine switch".

![creation d'un nouveau switch externe HyperV partie 2](/images/articles/docker/docker-machine/hyperv/nouveau-switch-externe-hyperV-2.jpg)

Ignorer l'avertissement en appuyant sur le bouton "oui".

![activation du nouveau switch externe HyperV](/images/articles/docker/docker-machine/hyperv/activation-nouveau-switch-externe-hyperV.jpg)

Une fois le switch externe cr√©√©, on peut enfin l'utiliser pour d√©ployer notre machine Docker depuis le driver hyperv. Lancez un powershell en mode administrateur et ex√©cuter la commande suivante :

    docker-machine create --driver=hyperv --hyperv-virtual-switch "Docker machine switch" hyperv-test

R√©sultat :

    Running pre-create checks...
    Creating machine...
    (hyperv-test) Copying C:\Users\hatim\.docker\machine\cache\boot2docker.iso to C:\Users\hatim\.docker\machine\machines\hyperv-test\boot2docker.iso...
    (hyperv-test) Creating SSH key...
    (hyperv-test) Creating VM...
    (hyperv-test) Using switch "Docker machine switch"
    ...
    Checking connection to Docker...
    Docker is up and running!
    To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe env hyperv-test

V√©rifions ensuite la liste des h√¥tes Docker :

    docker-machine ls

R√©sultat :

    NAME          ACTIVE   DRIVER   STATE     URL                       SWARM   DOCKER     ERRORS
    hyperv-test   -        hyperv   Running   tcp://192.168.0.19:2376           v18.09.7

Nous voyons bien notre nouvelle machine Docker hyperv-test avec le moteur Docker en version v18.09.7.

### Le pilote amazonec2 (cloud)

Pour changer un peu du d√©ploiement local, nous utiliserons cette fois-ci un service cloud, plus pr√©cis√©ment nous utiliserons le driver amazonec2 qui va nous permettre de cr√©er des machines sur le service cloud AWS (Amazon Web Services).

Pour cr√©er des machines sur AWS , vous devez fournir deux param√®tres :

*   un ID de cl√© d'acc√®s AWS
*   une cl√© d'acc√®s secr√®te AWS

Rendez-vous dans le service IAM depuis votre console AWS :

![selection du service IAM dans AWS Console](/images/articles/docker/docker-machine/aws/iam-aws-selection.jpg)

Une fois rendu dans le service IAM, si vous n'avez pas encore d'utilisateur, cr√©ez-en un en appuyant sur le bouton "Ajouter un utilisateur" :

![nouveau utilisateur AWS](/images/articles/docker/docker-machine/aws/new-user-aws.jpg)

Apr√®s cela, cliquez sur le bouton "Cr√©er une cl√© d'acc√®s" :

![Cr√©ation des cl√©s d'acc√®s AWS](/images/articles/docker/docker-machine/aws/new-access-key.jpg)

R√©cup√©rer maintenant votre ID et cl√© d'acc√®s secr√®te de votre compte AWS :

![R√©cup√©ration des cl√©s d'acc√®s AWS](/images/articles/docker/docker-machine/aws/get-access-key.jpg)

Configurer les informations d'identification en utilisant le fichier d'informations d'identification standard du fichier Amazon AWS ~/.aws/credentials, de sorte que vous n'ayez plus besoin de les saisir √† chaque fois que vous ex√©cutez la commande create. Voici un exemple du fichier d'identification :

    [default]
    aws_access_key_id = AKIAYPGQYET63DHEKXKA 
    aws_secret_access_key = VOTRE-CLE-SECRETE

On peut d√®s √† pr√©sent cr√©er notre instance EC2 (VM aws) depuis notre machine ma√Ætre Docker. Dans cet exemple nous allons utiliser la r√©gion us-west-1 et autoriser le port 8000 dans le security groupe (firewall AWS) li√© √† l'instance EC2 :

    docker-machine create --driver amazonec2 --amazonec2-open-port 8000 --amazonec2-region us-west-1 aws-test

R√©sultat :

    Running pre-create checks...
    Creating machine...
    (aws-test) Launching instance...
    Waiting for machine to be running, this may take a few minutes...
    Detecting operating system of created instance...
    Waiting for SSH to be available...
    ...
    Checking connection to Docker...
    Docker is up and running!
    To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env aws-test

Nous allons v√©rifier subs√©quemment sur notre console si notre instance EC2 est bien pr√©sente dessus. Pour cela, rendez-vous dans le service EC2 et assurez-vous d'√™tre bien dans la m√™me r√©gion que celle lanc√©e dans la commande create :

![V√©rification de l'instance EC2 cr√©√©e par Docker Machine](/images/articles/docker/docker-machine/aws/new-ec2-instance-created-by-docker-machine.jpg)

Cool, notre instance EC2 aws-test est bien pr√©sente. Maintenant v√©rifions si le port 8000 est bien autoris√© dans le security group li√© √† cette instance :

![V√©rification du security group de l'instance EC2 cr√©√©e par Docker Machine](/images/articles/docker/docker-machine/aws/security-group-check.jpg)

Le security group autorise bel et bien le port 8000, vous pouvez d√®s √† pr√©sent lancer vos conteneurs directement sur votre instance EC2 depuis votre machine ma√Ætre. Dans cet exemple nous allons instancier l'image [httpd](https://hub.docker.com/_/httpd) dans notre nouvelle machine Docker aws-test .

Premi√®rement, nous allons rendre notre h√¥te Docker aws-test active :

    eval $(docker-machine env aws-test)

Deuxi√®mement, nous allons t√©l√©charger et ex√©cuter notre image httpd

    docker run -d -p 8000:80 --name httpdc httpd

Si vous visitez la page [http://VOTRE\_IP:8000](http://VOTRE_IP:8000), vous observerez alors le message "It works!".

### Supprimer vos machines Docker

Comme je n'ai plus besoin de mes machines, je peux alors les supprimer. Pour ce faire, je vais utiliser la commande docker-machine rm <MACHINE NAME>. Cette commande aura pour effet de **supprimer d√©finitivement la machine Docker** de votre plateforme de gestion de virtualisation locale mais aussi de la supprimer de votre fournisseur de cloud, si jamais vous en utilisez un.

    docker-machine rm -f aws-test

    docker-machine rm -f vbox-test

Conclusion
----------

Nous avons utilis√© Docker Machine pour cr√©er des h√¥tes Docker localement mais aussi dans le Cloud, cela nous montre √† quel point il est facile de d√©ployer et des machines Docker n'importe o√π et de centraliser la gestion de ces VMs depuis une seule machine ma√Ætre. Comme √† mon habitude, je partage avec vous un **aide-m√©moire r√©sumant les diff√©rentes commandes de Docker Machine**.

    ## Cr√©er une machine Docker
    docker-machine create -d <DRIVER NAME> <MACHINE NAME>
        -d ou --driver : choisir un driver
    
    ## Rendre une machine Docker active
    eval $(docker-machine env <MACHINE NAME>)
    
    # Lister les machines Docker
    docker-machine ls
    
    # V√©rifier quelle est la machine Docker active dans le shell courant
    docker-machine active
    
    ## Supprimer un ou plusieurs machine(s) Docker
    docker-machine rm <MACHINE NAME>
        -f ou --force : forcer la suppression
    
    ## Se connecter en ssh sur une machine Docker
    docker-machine ssh <MACHINE NAME>
    
    ## Stopper une machine Docker
    docker-machine stop <MACHINE NAME>
    
    ## D√©marrer une machine Docker
    docker-machine start <MACHINE NAME>
    
    ## Red√©marrer une machine Docker
    docker-machine restart <MACHINE NAME>
    
    ## R√©colter des informations sur une machine Docker
    docker-machine inspect <MACHINE NAME>
    
    ## R√©cup√©rer les variables d'environnements d'une machine Docker
    docker-machine env <MACHINE NAME>
    
    ## Mettre √† niveau une machine Docker vers la derni√®re version de Docker
    docker-machine upgrade <MACHINE NAME>